---
name: 'Generate'
description: 'Generate terraform files with edb-terraform'
inputs:
  project-name:
    description: 'Name of the project'
    required: false
    default: runner-terraform
  work-directory:
    description: 'Path to work directory'
    required: false
    default: ${{ github.workspace }}
  infra-file-path:
    description: 'Infrastructure file path'
    required: true
  infra-template-variables:
    description: 'Infrastructure template variables passed along with infra-file-path. Use stringified json or pass in a json file.'
    required: false
    default: '{}'
  cloud-service-provider:
    description: 'Cloud service provider'
    required: false
    default: aws
  remote-state:
    description: 'Terraform remote state type. "cloud" maps to each cloud providers storage backend offering. Override with any supported backend type such as postgres or consul. Use of "local" will require manual destruction if git actions fail.'
    required: false
    default: 'cloud'
  user-templates:
    description: 'Post terraform templates'
    required: false
    default: '/dev/null'
  create_artifact:
    description: 'Create artifacts'
    required: false
    default: 'true'
  artifact_name:
    description: 'Artifact name. When artifact_overwrite is false, append unique identifiers such as the run-id and run-attempt to the artifact name.'
    required: false
    default: 'terraform-project'
  artifact_id:
    description: 'Artifact id'
    required: false
    default: ''
  artifact_overwrite:
    description: 'Overwrite existing artifact. When false, artifact_name needs to be unique for each run starting actions/upload-artifact@v4'
    required: false
    default: 'false'
outputs:
  project-path:
    description: "Project path"
    value: ${{ inputs.work-directory }}/${{ inputs.project-name }}
runs:
  using: "composite"
  steps:
    - name: Check dependencies
      working-directory: ${{ inputs.repo-directory }}
      shell: bash
      run: |
        programs=("edb-terraform")

        for program in "${programs[@]}"
        do
          if ! builtin type -P "$program" >/dev/null 2>&1
          then
            printf "$program not found" >&2
            exit 1
          fi
        done

    - name: Generate terraform files
      working-directory: ${{ inputs.repo-directory }}
      shell: bash
      env:
        CLOUD_SERVICE_PROVIDER: ${{ inputs.cloud-service-provider }}
        WORK_PATH: ${{ inputs.work-directory }}
        PROJECT_NAME: ${{ inputs.project-name }}
        INFRA_FILE: ${{ inputs.infra-file-path }}
        INFRA_TEMPLATE_VARIABLES: ${{ inputs.infra-template-variables }}
        REMOTE_STATE_TYPE: ${{ inputs.remote-state }}
        USER_TEMPLATES: ${{ inputs.user-templates }}
      run: |
        edb-terraform generate \
          --cloud-service-provider "$CLOUD_SERVICE_PROVIDER" \
          --work-path "$WORK_PATH" \
          --project-name "$PROJECT_NAME" \
          --infra-file "$INFRA_FILE" \
          --infra-template-variables "$INFRA_TEMPLATE_VARIABLES" \
          --remote-state-type "$REMOTE_STATE_TYPE" \
          --user-templates "$USER_TEMPLATES"

    - name: Upload artifacts
      if: ${{ inputs.create_artifact == true || inputs.create_artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact_name }}${{ inputs.artifact_id }}
        path: ${{ inputs.work-directory }}/${{ inputs.project-name }}
        overwrite: ${{ inputs.artifact_overwrite }}
