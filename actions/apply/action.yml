---
# This action requires that AWS/Azure/Gcloud credentials are setup
# AWS: https://github.com/aws-actions/configure-aws-credentials?tab=readme-ov-file#long-term-credentials-warning-10323
# Upon failure, catch errors in the workflow to start the destroy action
# Composite actions pre/post actions are not supported:
# Ref: https://github.com/actions/runner/issues/1478
name: 'Apply'
description: 'Provision Terraform resources'
inputs:
  project-path:
    description: "Project path"
    required: true
  plan-filename:
    description: "Terraform plan filename"
    required: false
    default: "plan.out"
  cloud-service-provider:
    description: 'Cloud service provider'
    required: false
    default: aws
  backend-configs:
    description: 'List of backend configuration options for terraform init. Expects a series of key-value pairs or a single file when remote state is not `local`. Make sure to mask sensitive values.'
    required: false
    default: '[]'
  force-service-machines:
    description: 'Append an ssh port rule for all machines'
    required: false
    default: 'true'
  force-service-biganimal:
    description: 'Append service cidr blocks to BigAnimals allow list'
    required: false
    default: 'true'
  service-cidrblocks:
    description: 'Service CIDR blocks which will be applied when defaults=service under a port configuration'
    required: false
    default: '[]'
  force-dynamic-ip:
    description: 'Append the controllers ip to the service cidr blocks.'
    required: false
    default: 'true'
  mask-secrets:
    description: 'Mask secrets from terraform output'
    required: false
    default: 'true'
  create-artifact:
    description: 'Create artifact for plan file'
    required: false
    default: 'true'
  artifact-name:
    description: 'Artifact name. When artifact_overwrite is false, append unique identifiers such as the run-id and run-attempt to the artifact name.'
    required: false
    default: 'terraform-plan'
  artifact-id:
    description: 'Artifact id'
    required: false
    default: ''
  artifact-overwrite:
    description: 'Overwrite existing artifact. When false, artifact_name needs to be unique for each run starting actions/upload-artifact@v4'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Check dependencies
      shell: bash
      env:
        CLOUD_SERVICE_PROVIDER: ${{ inputs.cloud-service-provider }}
      run: |
        RC=1
        printf "Checking if cloud cli and credentials are configured: $CLOUD_SERVICE_PROVIDER\n"
        case "$CLOUD_SERVICE_PROVIDER" in
          aws)
            aws sts get-caller-identity &> /dev/null
            RC=$?
            ;;
          azure)
            az account show &> /dev/null
            RC=$?
            ;;
          gcloud)
            gcloud auth list 2>&1 | grep "No credentialed accounts." > /dev/null
            RC=$?
            ;;
          *)
            printf "Cloud service provider not supported: $CLOUD_SERVICE_PROVIDER" 1>&2
            exit $RC
            ;;
        esac

        if [ $RC -ne 0 ]
        then
          printf "Cloud cli binary is not found or credentials are not configured: $CLOUD_SERVICE_PROVIDER" 1>&2
          exit $RC
        fi

        programs=("terraform" "jq")
        for program in "${programs[@]}"
        do
          if ! builtin type -P "$program" >/dev/null 2>&1
          then
            printf "$program not found" >&2
            exit 1
          fi
        done

    - name: Terraform init
      working-directory: ${{ inputs.project-path }}
      shell: bash
      env:
        BACKEND_CONFIGS: ${{ inputs.backend-configs }}
      run: |
        CONFIGS=$(echo $BACKEND_CONFIGS | jq -r .[])
        OPTION="-backend-config="
        CONFIG_STR=("-input=false")
        for config in $CONFIGS
        do
          CONFIG_STR+=("$OPTION$config")
        done

        terraform init "${CONFIG_STR[@]}"

    - name: Terraform plan
      id: plan
      working-directory: ${{ inputs.project-path }}
      shell: bash
      env:
        PLAN_FILENAME: ${{ inputs.plan-filename }}
        FORCE_SERVICE_MACHINES: ${{ inputs.force-service-machines }}
        FORCE_SERVICE_BIGANIMAL: ${{ inputs.force-service-biganimal }}
        SERVICE_CIDRBLOCKS: ${{ inputs.service-cidrblocks }}
        FORCE_DYNAMIC_IP: ${{ inputs.force-dynamic-ip }}
      run: |
        terraform plan -input=false \
                       -out="$PLAN_FILENAME" \
                       -var "force_service_machines=$FORCE_SERVICE_MACHINES" \
                       -var "force_service_biganimal=$FORCE_SERVICE_BIGANIMAL" \
                       -var "service_cidrblocks=$SERVICE_CIDRBLOCKS" \
                       -var "force_dynamic_ip=$FORCE_DYNAMIC_IP"

    - name: Upload plan artifact
      if: ${{ inputs.create-artifact == true || inputs.create-artifact == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}${{ inputs.artifact-id }}
        path: ${{ inputs.work-directory }}/${{ inputs.project-path }}/${{ inputs.plan-filename }}
        overwrite: ${{ inputs.artifact-overwrite }}

    - name: Terraform apply
      working-directory: ${{ inputs.project-path }}
      shell: bash
      env:
        PLAN_FILENAME: ${{ inputs.plan-filename }}
      run: |
        terraform apply -input=false \
                        -auto-approve \
                        "$PLAN_FILENAME"

    - name: Mask secrets
      working-directory: ${{ inputs.project-path }}
      shell: bash
      if: ${{ inputs.mask-secrets == true || inputs.mask-secrets == 'true' }}
      run: |
        MASK_PREFIX="::add-mask::"
        SECRET_KEYS='["password","public_ip","public_dns"]'

        # Muli-line secrets must be escaped or applied per-line.
        # https://github.com/actions/toolkit/blob/main/docs/commands.md#register-a-secret
        # - multiline secret failed to mask so we fallback to manual masking
        for line in $(cat ssh-id_rsa)
        do
          echo "$MASK_PREFIX$line"
        done

        # mask secrets from a list of keynames
        SECRETS=$( \
          terraform output -json servers \
          | jq -r 'paths(scalars) as $path | {key: $path[-1], value: getpath($path)}' \
          | jq -r --argjson secret_keys "$SECRET_KEYS" \
            'select(.key as $key | $secret_keys | index($key))' \
          | jq -r '"\(.value)"'
        )

        for secret in $SECRETS
        do
          echo "$MASK_PREFIX$secret"
        done
