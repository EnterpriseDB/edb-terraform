# All modules should reference module.spec.base.<attribute> as it will hold all the values from the yaml file
# All modules should depend_on null_resource.validation to ensure all validations complete before continuing
# Run directly by using terraform apply -target null_resource.validation
{% include "validation.tf.j2" %}

{% for region in regions.keys() %}
{%   set region_ = region | replace('-', '_') %}

{%   if has_regions %}
{%     include "network.tf.j2" %}
{%   endif %}

{%   if has_machines %}
{%     include "key_pair.tf.j2" %}

{%     include "machine.tf.j2" %}
{%   endif %}

{%   if has_databases %}
{%     include "database.tf.j2" %}
{%   endif %}

{%   if has_aurora %}
{%     include "aurora.tf.j2" %}
{%   endif %}

{%   if has_biganimal %}
{%     include "biganimal.tf.j2" %}
{%   endif %}

{%   if has_kubernetes %}
{%     include "kubernetes.tf.j2" %}
{%   endif %}

{% endfor %}

{% if has_region_peering %}
{%   include "region_peering.tf.j2" %}
{% endif %}

resource "local_file" "servers_yml" {
  filename        = "${abspath(path.root)}/servers.yml"
  file_permission = "0600"
  content         = <<-EOT
---
servers:
{% set boxes = {
  'machines': { 
    'active': has_machines,
    'regions': machine_regions,
    'module_base': 'module.machine_',
  },
  'databases': {
    'active': has_databases,
    'regions': database_regions,
    'module_base': "module.database_",
  },
  'aurora': {
    'active': has_aurora,
    'regions': aurora_regions,
    'module_base': "module.aurora_",
  },
  'biganimal': {
    'active': has_biganimal,
    'regions': biganimal_regions,
    'module_base': "module.biganimal_",
  },
  'kubernetes': {
    'active': has_kubernetes,
    'regions': kubernetes_regions,
    'module_base': "module.kubernetes_",
  }  
} %}
{% for type, attributes in boxes.items() if attributes["active"] %}
  {{type}}:
{%   for region in attributes["regions"] -%}
{%   set module = attributes["module_base"] ~ region | replace('-', '_') %}
%{ for key, value in {{ module }} ~}
    ${key}:
%{   for name, item in value ~}
      ${name}: ${try(jsonencode(item), "Error, unsupported type",)}
%{   endfor ~}
%{ endfor ~}
{%   endfor %}
{% endfor %}
    EOT
}

{% for type, attributes in boxes.items() if attributes["active"] %}
output "{{type}}" {
  value = [
{%   for region in attributes["regions"] -%}
{%   set module = attributes["module_base"] ~ region | replace('-', '_') %}
    {{ module }}[*],
{%   endfor %}
  ]
  sensitive = true
}
{% endfor %}

locals {
  # outputs set with the help of jinja2 in edb-terraform
  outputs = {
{% for type, attributes in boxes.items() if attributes["active"] %}
    "{{type}}" = merge(
{%   for region in attributes["regions"] -%}
{%   set module = attributes["module_base"] ~ region | replace('-', '_') %}
    tomap([for key, values in {{module}}[*]: values]...),
{%   endfor %}
    )
{% endfor %}
  }
}

output "{{output_name}}" {
  description = <<-EOT
  toplevel default made through jinja2 templating with edb-terraform: set to servers
  Use 'terraform output -json' for the following output and other info such as types:
  {{output_name}}:
    value:
      machines:
        machine_name:
          instance_type: <instance_type>
      databases:
        database_name:
          instance_type: <instance_type>

  Use 'terraform output -json servers' for the following output:
  machines:
    machine_name:
      instance_type: <instance_type>
  databases:
    database_name:
      instance_type: <instance_type>
  EOT
  value = local.outputs
  sensitive = true
}

output "spec" {
  value = module.spec[*]
  sensitive = true
}

resource "local_file" "user_templates" {
  /*
  User custom templates based on local.outputs and .tftpl stripped

    output_name default made through jinja2 templating with edb-terraform: 'servers'
    terraform output -json <output_name>
  */
  for_each   = toset(module.spec.base.templates)
  content    = templatefile(each.value, local.outputs)
  filename   = "${abspath(path.root)}/${trimsuffix(basename(each.value), ".tftpl")}"
  file_permission = "0600"
}
