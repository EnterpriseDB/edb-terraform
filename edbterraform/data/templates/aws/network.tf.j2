module "vpc_{{ region_ }}" {
  source = "./modules/vpc"

  vpc_cidr_block = try(module.spec.base.regions["{{ region }}"].cidr_block, null)
  name_id        = module.spec.hex_id
  tags           = module.spec.base.tags

  providers = {
    aws = aws.{{ region_ }}
  }

  depends_on = [ null_resource.validation ]
}

module "network_{{ region_ }}" {
  source = "./modules/network"

  for_each = lookup(module.spec.region_zone_networks, "{{ region }}", null)

  vpc_id             = module.vpc_{{ region_ }}.vpc_id
  cidr_block         = each.value.cidr
  availability_zone  = each.value.zone
  tags               = module.spec.base.tags

  depends_on = [module.vpc_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "routes_{{ region_ }}" {
  source = "./modules/routes"

  subnet_count       = length([for a, s in lookup(module.spec.region_zone_networks, "{{ region }}", {}) : a])
  vpc_id             = module.vpc_{{ region_ }}.vpc_id
  public_cidrblock   = "0.0.0.0/0" # Allow all routing
  cluster_name       = module.spec.base.tags.cluster_name
  tags               = module.spec.base.tags

  depends_on = [module.network_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "security_{{ region_ }}" {
  source = "./modules/security"

  vpc_id           = module.vpc_{{ region_ }}.vpc_id
  cluster_name     = module.spec.base.tags.cluster_name
  ports            = try(module.spec.region_ports["{{ region }}"], [])
  public_cidrblocks = var.public_cidrblocks
  service_cidrblocks = local.service_cidrblocks
  internal_cidrblocks = module.spec.region_cidrblocks
  tags             = module.spec.base.tags

  depends_on = [module.routes_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}
