# Find the AMI id, which varies by region.
# This must be done outside of the module to avoid the data source being called per machine.
# If set within the module, it will delay calling the data source and causes terraform to re-create resources since it is unknown.
data "aws_ami" "default_{{ region_ }}" {
  for_each = var.spec.images
  most_recent = true

  filter {
    name   = "name"
    values = ["${each.value.name}*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["${each.value.owner}"]

  provider = aws.{{ region_ }}
}

module "machine_{{ region_ }}" {
  source = "./modules/machine"

  for_each = { for rm in lookup(module.spec.region_machines, "{{ region }}", []) : rm.name => rm }

  operating_system         = each.value.spec.operating_system
  vpc_id                   = module.vpc_{{ region_ }}.vpc_id
  subnet_id                = module.network_{{ region_ }}[each.value.spec.zone_name].subnet_id
  cidr_block               = each.value.spec.cidr
  az                       = each.value.spec.zone
  machine                  = each.value
  image_info               = data.aws_ami.default_{{ region_ }}
  custom_security_group_ids = module.security_{{ region_ }}.security_group_ids
  ssh_pub_key              = module.spec.public_key
  ssh_priv_key             = module.spec.private_key
  use_agent                = module.spec.base.ssh_key.use_agent
  key_name                 = module.key_pair_{{ region_ }}.key_pair_id
  tags                     = each.value.spec.tags
  public_cidrblocks        = var.public_cidrblocks
  service_cidrblocks       = local.service_cidrblocks
  internal_cidrblocks      = module.spec.region_cidrblocks

  depends_on = [module.key_pair_{{ region_ }}, module.security_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}
