locals {
  region_az_networks = {
    for region, region_spec in var.regions: region => {
      for az, network in region_spec.azs: az => network
    }
  }
  region_machines = {
    for name, machine_spec in var.machines: machine_spec.region => {
      name = name
      spec = machine_spec
    }...
  }
  region_databases = {
    for name, database_spec in var.databases: database_spec.region => {
      name = name
      spec = database_spec
    }...
  }
  region_auroras = {
    for name, aurora_spec in var.aurora: aurora_spec.region => {
      name = name
      spec = aurora_spec
    }...
  }
}

{% for region in regions.keys() %}
{%   set region_ = region | replace('-', '_') %}
module "vpc_{{ region_ }}" {
  source = "./modules/vpc"

  vpc_cidr_block = lookup(lookup(var.regions, "{{ region }}"), "cidr_block")
  vpc_tag        = var.vpc_tag

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "network_{{ region_ }}" {
  source = "./modules/network"

  for_each = lookup(local.region_az_networks, "{{ region }}", null)

  vpc_id             = module.vpc_{{ region_ }}.vpc_id
  public_subnet_tag  = var.public_subnet_tag
  cidr_block         = each.value
  availability_zone  = each.key

  depends_on = [module.vpc_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "routes_{{ region_ }}" {
  source = "./modules/routes"

  subnet_count       = length([for a, s in lookup(local.region_az_networks, "{{ region }}", {}) : a])
  vpc_id             = module.vpc_{{ region_ }}.vpc_id
  project_tag        = var.project_tag
  public_cidrblock   = var.public_cidrblock
  cluster_name       = var.cluster_name

  depends_on = [module.network_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "security_{{ region_ }}" {
  source = "./modules/security"

  vpc_id           = module.vpc_{{ region_ }}.vpc_id
  public_cidrblock = var.public_cidrblock
  project_tag      = var.project_tag
  service_ports    = lookup(lookup(var.regions, "{{ region }}", null), "service_ports", [])
  cluster_name     = var.cluster_name

  depends_on = [module.routes_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "key_pair_{{ region_ }}" {
  source = "./modules/key_pair"

  cluster_name = var.cluster_name
  ssh_pub_key  = var.ssh_pub_key

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "machine_{{ region_ }}" {
  source = "./modules/machine"

  for_each = { for rm in lookup(local.region_machines, "{{ region }}", []) : rm.name => rm }

  operating_system         = var.operating_system
  vpc_id                   = module.vpc_{{ region_ }}.vpc_id
  cidr_block               = lookup(lookup(local.region_az_networks, "{{ region }}", null), each.value.spec.az, null)
  az                       = each.value.spec.az
  machine                  = each.value
  cluster_name             = var.cluster_name
  custom_security_group_id = module.security_{{ region_ }}.aws_security_group_id
  ssh_pub_key              = var.ssh_pub_key
  ssh_priv_key             = var.ssh_priv_key
  ssh_user                 = var.ssh_user
  created_by               = var.created_by
  key_name                 = module.key_pair_{{ region_ }}.key_pair_id

  depends_on = [module.key_pair_{{ region_ }}, module.security_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "database_{{ region_ }}" {
  source = "./modules/database"

  for_each = { for rm in lookup(local.region_databases, "{{ region }}", []) : rm.name => rm }

  vpc_id                   = module.vpc_{{ region_ }}.vpc_id
  database                 = each.value
  cluster_name             = var.cluster_name
  custom_security_group_id = module.security_{{ region_ }}.aws_security_group_id
  created_by               = var.created_by

  depends_on = [module.key_pair_{{ region_ }}, module.security_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}

module "aurora_{{ region_ }}" {
  source = "./modules/aurora"

  for_each = { for rm in lookup(local.region_auroras, "{{ region }}", []) : rm.name => rm }

  vpc_id                   = module.vpc_{{ region_ }}.vpc_id
  aurora                   = each.value
  cluster_name             = var.cluster_name
  custom_security_group_id = module.security_{{ region_ }}.aws_security_group_id
  created_by               = var.created_by

  depends_on = [module.key_pair_{{ region_ }}, module.security_{{ region_ }}]

  providers = {
    aws = aws.{{ region_ }}
  }
}


{% endfor %}
{% for (requester, accepter) in peers %}
{% set requester_ = requester|replace('-', '_') %}
{% set accepter_ = accepter|replace('-', '_') %}
module "vpc_peering_{{ requester_ }}_{{ accepter_ }}" {
  source = "./modules/vpc_peering"

  vpc_id      = module.vpc_{{ requester_ }}.vpc_id
  peer_vpc_id = module.vpc_{{ accepter_ }}.vpc_id
  peer_region = "{{ accepter }}"

  depends_on = [module.vpc_{{ requester_ }}, module.vpc_{{ accepter_ }}]

  providers = {
    aws = aws.{{ requester_ }}
  }
}

module "vpc_peering_accepter_{{ requester_}}_{{ accepter_ }}" {
  source = "./modules/vpc_peering_accepter"

  connection_id = module.vpc_peering_{{ requester_ }}_{{ accepter_ }}.id

  depends_on = [module.vpc_peering_{{ requester_ }}_{{ accepter_ }}]

  providers = {
    aws = aws.{{ accepter_ }}
  }
}

module "vpc_peering_routes_{{ requester_ }}_{{ accepter_ }}" {
  source = "./modules/vpc_peering_routes"

  connection_id          = module.vpc_peering_{{ requester_ }}_{{ accepter_ }}.id
  route_table_id         = module.routes_{{ requester_ }}.route_table_id
  destination_cidr_block = module.vpc_{{ accepter_ }}.vpc_cidr_block

  depends_on = [module.routes_{{ requester_ }}, module.vpc_peering_{{ requester_ }}_{{ accepter_ }}]

  providers = {
    aws = aws.{{ requester_ }}
  }
}

module "vpc_peering_routes_{{ accepter_ }}_{{ requester_ }}" {
  source = "./modules/vpc_peering_routes"

  connection_id          = module.vpc_peering_{{ requester_ }}_{{ accepter_ }}.id
  route_table_id         = module.routes_{{ accepter_ }}.route_table_id
  destination_cidr_block = module.vpc_{{ requester_ }}.vpc_cidr_block

  depends_on = [module.routes_{{ accepter_ }}, module.vpc_peering_{{ requester_ }}_{{ accepter_ }}]

  providers = {
    aws = aws.{{ accepter_ }}
  }
}

{% endfor %}

resource "local_file" "servers_yml" {
  filename        = "${abspath(path.root)}/servers.yml"
  file_permission = "0600"
  content         = <<-EOT
---
servers:
{% if machine_regions | length > 0 %}
  machines:
{% endif %}
{% for region in machine_regions %}
{% set region_ = region | replace('-', '_') %}
%{for key in keys(module.machine_{{ region_ }}) ~}
    ${key}:
      type: ${module.machine_{{ region_ }}[key].machine_ips.type}
      region: ${module.machine_{{ region_ }}[key].machine_ips.region}
      az: ${module.machine_{{ region_ }}[key].machine_ips.az}
      public_ip: ${module.machine_{{ region_ }}[key].machine_ips.public_ip}
      private_ip: ${module.machine_{{ region_ }}[key].machine_ips.private_ip}
      public_dns: ${module.machine_{{ region_ }}[key].machine_ips.public_dns}
%{endfor~}
{% endfor %}
{% if database_regions | length > 0 %}
  databases:
{% endif %}
{% for region in database_regions %}
{% set region_ = region | replace('-', '_') %}
%{for key in keys(module.database_{{ region_ }}) ~}
    ${key}:
      region: ${module.database_{{ region_ }}[key].database_ips.region}
      username: "${module.database_{{ region_ }}[key].database_ips.username}"
      password: "${module.database_{{ region_ }}[key].database_ips.password}"
      address: ${module.database_{{ region_ }}[key].database_ips.address}
      port: ${module.database_{{ region_ }}[key].database_ips.port}
      dbname: "${module.database_{{ region_ }}[key].database_ips.dbname}"
%{endfor~}
{% endfor %}
{% if aurora_regions | length > 0 %}
  aurora:
{% endif %}
{% for region in aurora_regions %}
{% set region_ = region | replace('-', '_') %}
%{for key in keys(module.aurora_{{ region_ }}) ~}
    ${key}:
      region: ${module.aurora_{{ region_ }}[key].aurora_ips.region}
      username: "${module.aurora_{{ region_ }}[key].aurora_ips.username}"
      password: "${module.aurora_{{ region_ }}[key].aurora_ips.password}"
      address: ${module.aurora_{{ region_ }}[key].aurora_ips.address}
      port: ${module.aurora_{{ region_ }}[key].aurora_ips.port}
      dbname: "${module.aurora_{{ region_ }}[key].aurora_ips.dbname}"
%{endfor~}
{% endfor %}
    EOT
}
