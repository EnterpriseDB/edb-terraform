module "vpc_{{ region_ }}"{
  source = "./modules/vpc"

  network_name = "${var.vpc_tag}-{{ region }}-${random_id.apply.hex}"

  providers = {
    google = google.{{ region_ }}
  }
}

module "network_{{ region_ }}" {
  source = "./modules/network"

  for_each = lookup(local.region_az_networks, "{{ region }}", null)

  network_name    = module.vpc_{{ region_ }}.vpc_id
  ip_cidr_range   = each.value
  name            = "{{region}}-${each.key}-${random_id.apply.hex}"

  depends_on = [module.vpc_{{ region_ }}]

  providers = {
    google = google.{{ region_ }}
  }
}

module "service_connection_{{ region_ }}" {
  source = "./modules/service_connection"

  # Creates a single service connection,
  # if region has dbaas
  for_each = (
    contains(keys(merge(local.region_databases, local.region_alloys)), "{{ region }}") ? 
      toset([ "{{region}}" ]) : toset([])
  )

  name = "{{ region }}-${random_id.apply.hex}"
  network = module.vpc_{{ region_ }}.vpc_id

  depends_on = [module.vpc_{{ region_ }}, local.region_databases]
  
  providers = {
    google = google.{{ region_ }}
  }
}

# Not Implemented, using defaults provided by terraform/gcloud
/*
module "routes_{{ region_ }}"{
  source = "./modules/routes"
}
*/

module "security_{{ region_ }}" {
  source = "./modules/security"

  network_name  = module.vpc_{{ region_ }}.vpc_id

  service_name = "service-{{ region }}-${random_id.apply.hex}"
  service_ports    = lookup(lookup(var.regions, "{{ region }}", null), "service_ports", [])
  public_cidrblock = var.public_cidrblock

  region_name = "region-{{ region }}-${random_id.apply.hex}"
  region_ports = lookup(lookup(var.regions, "{{ region }}", null), "region_ports", [])
  region_cidrblocks = flatten([
    for region in try(var.regions, []) : [
      for ip_cidr in try(region.azs, []) : ip_cidr
      ] 
    ])

  depends_on = [module.network_{{ region_ }}]

  providers = {
    google = google.{{ region_ }}
  }
}
