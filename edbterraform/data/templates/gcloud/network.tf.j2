module "vpc_{{ region_ }}"{
  source = "./modules/vpc"

  network_name = "{{ region }}-${module.spec.hex_id}"

  providers = {
    google = google.{{ region_ }}
  }

  depends_on = [ null_resource.validation ]
}

module "network_{{ region_ }}" {
  source = "./modules/network"

  for_each = lookup(module.spec.region_zone_networks, "{{ region }}", null)

  network_name    = module.vpc_{{ region_ }}.vpc_id
  ip_cidr_range   = each.value.cidr
  name            = "{{region}}-${each.key}-${module.spec.hex_id}"

  depends_on = [module.vpc_{{ region_ }}]

  providers = {
    google = google.{{ region_ }}
  }
}

module "service_connection_{{ region_ }}" {
  source = "./modules/service_connection"

  # Creates a single service connection,
  # if region has dbaas
  for_each = (
    contains(keys(merge(module.spec.region_databases, module.spec.region_alloys)), "{{ region }}") ? 
      toset([ "{{region}}" ]) : toset([])
  )

  name = "{{ region }}-${module.spec.hex_id}"
  network = module.vpc_{{ region_ }}.vpc_id

  depends_on = [module.network_{{ region_ }}]
  
  providers = {
    google = google.{{ region_ }}
  }
}

# Not Implemented, using defaults provided by terraform/gcloud
/*
module "routes_{{ region_ }}"{
  source = "./modules/routes"
}
*/

module "security_{{ region_ }}" {
  source = "./modules/security"

  network_name  = module.vpc_{{ region_ }}.vpc_id
  ports         = try(module.spec.region_ports["{{ region }}"], [])
  ingress_cidrs = module.spec.region_cidrblocks
  egress_cidrs  = module.spec.region_cidrblocks
  region        = "{{ region }}"
  name_id       = module.spec.hex_id

  depends_on = [module.service_connection_{{ region_ }}]

  providers = {
    google = google.{{ region_ }}
  }
}
