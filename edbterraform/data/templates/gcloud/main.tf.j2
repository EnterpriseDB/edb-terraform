{% include "validation.tf.j2" %}

{% for region in regions.keys() %}
{%   set region_ = region | replace('-', '_') %}

{%   if has_regions %}
{%     include "network.tf.j2" %}
{%   endif %}

{%   if has_machines %}
{%     include "machine.tf.j2" %}
{%   endif %}

{%  if has_databases %}
{%    include "database.tf.j2" %}
{%  endif %}

{%   if has_alloy %}
{%     include "alloy.tf.j2" %}
{%   endif %}

{%   if has_biganimal %}
{%     include "biganimal.tf.j2" %}
{%   endif %}

{%   if has_kubernetes %}
{%     include "kubernetes.tf.j2" %}
{%   endif %}
{% endfor %}

{% if has_region_peering %}
{%   include "region_peering.tf.j2" %}
{% endif %}

{% set boxes = {
  'machines': { 
    'regions': machine_regions,
    'module_base': 'module.machine_',
  },
  'databases': {
    'regions': database_regions,
    'module_base': "module.database_",
  },
  'alloy': {
    'regions': alloy_regions,
    'module_base': "module.alloy_",
  },
  'biganimal': {
    'regions': biganimal_regions,
    'module_base': "module.biganimal_",
  },
  'kubernetes': {
    'regions': kubernetes_regions,
    'module_base': "module.kubernetes_",
  }
} %}
locals {
  # Module names set with jinja2 in edb-terraform
  # Modules cannot be referenced dynamically.
  modules = {
{% for type, attributes in boxes.items() %}
    {{ type }} = flatten([
{%   for region in attributes["regions"] -%}
{%   set module = attributes["module_base"] ~ region | replace('-', '_') %}
      {{ module }},
{%   endfor %}
    ])
{% endfor %}
  }
}

output "modules" {
  description = "Variable which holds all final modules."
  value = local.modules
  sensitive = true
}

locals {
  # Set final output
  outputs = {
    for type, modules in local.modules: type => merge(jsondecode(
    <<-EOT
    [ %{ for num, module in modules ~}${ jsonencode(module) }%{ if tonumber(num) < length(modules)-1 ~},%{ endif ~}%{ endfor ~} ]
    EOT
    )...)
  }
  servers = { "servers" = local.outputs }
}

resource "local_file" "servers_yml" {
  /*
  Manually create the yaml file
  - ignore attributes named 'resources' for now to avoid cluttering the yaml file
  - For a view of 'resources', reference the outputs through 'terraform output -json modules or servers'
  */
  for_each        = var.create_servers_yml ? {"create": true} : {}
  filename        = "${abspath(path.root)}/servers.yml"
  file_permission = "0600"
  content         = <<-EOT
---
servers:
%{ for type, instances in local.outputs ~}
    ${type}:
%{   for name, attributes in instances ~}
      ${name}:
%{     for key, values in attributes ~}
%{       if key != "resources" ~}
        ${key}: ${jsonencode(values)}
%{       endif ~}
%{     endfor ~}
%{   endfor ~}
%{ endfor ~}
    EOT
}

output "{{output_name}}" {
  description = <<-EOT
  toplevel default made through jinja2 templating with edb-terraform: set to servers
  Use 'terraform output -json' for the following output and other info such as types:
  {{output_name}}:
    value:
      machines:
        machine_name:
          instance_type: <instance_type>
      databases:
        database_name:
          instance_type: <instance_type>

  Use 'terraform output -json servers' for the following output:
  machines:
    machine_name:
      instance_type: <instance_type>
  databases:
    database_name:
      instance_type: <instance_type>
  EOT
  value = local.outputs
  sensitive = true
}

output "spec" {
  value = module.spec[*]
  sensitive = true
}

resource "local_file" "user_templates" {
  /*
  User custom templates with local.outputs passed in for generation
    output_name default made through jinja2 templating with edb-terraform: 'servers'
    terraform output -json <output_name>
  */
  for_each   = fileset(path.root, "templates/*.tftpl")
  content    = templatefile(each.value, local.servers)
  filename   = "${abspath(path.root)}/${trimsuffix(basename(each.value), ".tftpl")}"
  file_permission = "0600"
}
